<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coinbase.Pro</name>
    </assembly>
    <members>
        <member name="M:Coinbase.Pro.IAccountsEndpoint.GetAllAccountsAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of trading accounts.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IAccountsEndpoint.GetAccountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Information for a single account. Use this endpoint when you know the account_id.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IAccountsEndpoint.GetAccountHistoryAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get account activity. Account activity either increases or decreases your account balance. Items are paginated and sorted latest first.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IAccountsEndpoint.GetAccountHoldAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Holds are placed on an account for any active orders or pending withdraw requests. As an order is filled, the hold amount is updated. If an order is canceled, any remaining hold is removed. For a withdraw, once it is completed, the hold is removed.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.CoinbaseProClient.Conversion">
            <summary>
            Stablecoin conversions
            </summary>
        </member>
        <member name="M:Coinbase.Pro.CoinbaseProClient.EnableFiddlerDebugProxy(System.String)">
            <summary>
            Enable HTTP debugging via Fiddler. Ensure Tools > Fiddler Options... > Connections is enabled and has a port configured.
            Then, call this method with the following URL format: http://localhost.:PORT where PORT is the port number Fiddler proxy
            is listening on. (Be sure to include the period after the localhost).
            </summary>
            <param name="proxyUrl">The full proxy URL Fiddler proxy is listening on. IE: http://localhost.:8888 - The period after localhost is important to include.</param>
        </member>
        <member name="M:Coinbase.Pro.ICoinbaseAccountsEndpoint.GetAllAccountsAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of your payment methods.
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.IConversionEndpoint.ConvertAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Stablecoin Conversions
            </summary>
            <param name="from">Currency Id</param>
            <param name="to">Currency id</param>
            <param name="amount">Amount of from to convert to to</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.ExtensionsForExceptions.GetErrorMessageAsync(Flurl.Http.FlurlHttpException)">
            <summary>
            Parses the response body of the failed HTTP call return any error status messages.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.ExtensionsForExceptions.GetErrorMessageAsync(System.Exception)">
            <summary>
            Parses the response body of the failed HTTP call return any error status messages.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IDepositsEndpoint.DepositFundsFromPaymentMethodAsync(System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Deposit funds from a payment method. See: https://docs.pro.coinbase.com/?r=1#payment-methods
            </summary>
            <param name="paymentMethodId">ID of the payment method</param>
            <param name="amount">The amount to deposit</param>
            <param name="currency">The type of currency</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Coinbase.Pro.IDepositsEndpoint.DepositFundsFromCoinbaseAccountAsync(System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Deposit funds from a coinbase account. You can move funds between your Coinbase accounts and your Coinbase Pro trading accounts within your daily limits. Moving funds between Coinbase and Coinbase Pro is instant and free. See the Coinbase Accounts section for retrieving your Coinbase accounts.
            </summary>
            <param name="coinbaseAccountId">ID of the coinbase account</param>
            <param name="amount">The amount to deposit</param>
            <param name="currency">The type of currency</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Coinbase.Pro.IDepositsEndpoint.GetDeposit(System.String,System.Threading.CancellationToken)">
            <summary>
            Get information on a single deposit.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IDepositsEndpoint.ListDeposits(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Get a list of deposits from the profile of the API key, in descending order by created time.
            </summary>
            <param name="profileId">Limit list of deposits to this profile_id. By default, it retrieves deposits across all of the user's profiles</param>
            <param name="limit">Truncate list to this many deposits, capped at 100. Default is 100.</param>
            <param name="before">If before is set, then it returns deposits created after the before timestamp, sorted by oldest creation date</param>
            <param name="after">If after is set, then it returns deposits created before the after timestamp, sorted by newest</param>
        </member>
        <member name="M:Coinbase.Pro.IDepositsEndpoint.GenerateCryptoDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            You can generate an address for crypto deposits. See the Coinbase Accounts section for information on how to retrieve your coinbase account ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coinbase.Pro.IFeesEndpoint.GetCurrentFeesAsync(System.Threading.CancellationToken)">
            <summary>
            This request will return your current maker and taker fee rates,
            as well as your 30-day trailing volume. Quoted rates are subject
            to change.
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.IFillsEndpoint.GetFillsByProductIdAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of recent fills.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IFillsEndpoint.GetFillsByOrderIdAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of recent fills.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetProductsAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of available currency pairs for trading.
            </summary>
            <remarks>
            The base_min_size and base_max_size fields define the min and max order size. The quote_increment field specifies the min order price as well as the price increment.
            The order price must be a multiple of this increment(i.e. if the increment is 0.01, order prices of 0.001 or 0.021 would be rejected).
            Product ID will not change once assigned to a product but the min/max/quote sizes can be updated in the future.
            </remarks>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetSingleProductAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get market data for a specific currency pair.
            </summary>
            <param name="productId">Required; the product id. eg: 'BTC-USD'</param>
            <returns></returns>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetOrderBookAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of open orders for a product. The amount of detail shown can be customized with the level parameter.
            </summary>
            <param name="productId"></param>
            <param name="level">1. Only the best bid and ask. 2. Top 50 bids and asks (aggregated). 3. Full order book (non aggregated)</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Snapshot information about the last trade (tick), best bid/ask and 24h volume.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetTradesAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List the latest trades for a product.
            </summary>
            <param name="productId">The coinbase specific product id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="limit">Number of results per request. Maximum 100. (default 100)</param>
            <param name="before">Request page before (newer) this pagination id.</param>
            <param name="after">Request page after (older) this pagination id.</param>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetHistoricRatesAsync(System.String,System.DateTime,System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Historic rates for a product. Rates are returned in grouped buckets based on requested granularity.
            </summary>
            <param name="start">Start time</param>
            <param name="end">End time</param>
            <param name="granularity">Desired timeslice in seconds. The granularity field must be one of the following values: {60, 300, 900, 3600, 21600, 86400}. Otherwise, your request will be rejected. These values correspond to timeslices representing one minute, five minutes, fifteen minutes, one hour, six hours, and one day, respectively.</param>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetStatsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get 24 hr stats for the product. volume is in base currency units. open, high, low are in quote currency units.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            List known currencies.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IMarketDataEndpoint.GetTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the API server time.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.GetAllOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            List your current open orders. Only open or un-settled orders are returned.
            As soon as an order is no longer open and settled, it will no longer
            appear in the default request.
            </summary>
            <param name="status">Status: ['open', 'pending', 'active', 'all']. Limit list of orders to these
            statuses. Passing 'all' returns orders of all statuses. To specify multiple statuses,
            supply a comma delimited list of statuses. IE: 'open, pending'.</param>
            <param name="productId">The coinbase specific product id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="limit">Number of results per request. Maximum 100. (default 100)</param>
            <param name="before">Request page before (newer) this pagination id.</param>
            <param name="after">Request page after (older) this pagination id.</param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.GetOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a single order by order id.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.CancelAllOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            With best effort, cancel all open orders. The response is a list of ids of the canceled orders.
            </summary>
            <param name="productId">When this parameter is null, all orders across all order books are canceled.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.CancelOrderByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a previously placed order.
            If the order had no matches during its lifetime its record may be purged.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.PlaceMarketOrderAsync(Coinbase.Pro.Models.OrderSide,System.String,System.Decimal,Coinbase.Pro.Models.AmountType,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Market orders differ from limit orders in that they provide no pricing
            guarantees. They however do provide a way to buy or sell specific
            amounts of bitcoin or fiat without having to specify the price. Market
            orders execute immediately and no part of the market order will go on
            the open order book. Market orders are always considered takers and incur
            taker fees. When placing a market order you can specify funds
            and/or size. Funds will limit how much of your quote currency
            account balance is used and size will limit the bitcoin amount transacted.
            </summary>
            <param name="side">Buy side or Sell side</param>
            <param name="productId">Product Id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="amount">The amount, size or funds to buy or sell.</param>
            <param name="amountType">When placing a market order you can specify funds and/or size.
               Funds will limit how much of your quote currency account balance
               is used and size will limit the cryptocurrency amount transacted.</param>
            <param name="clientOid"> The optional client_oid field must be a
               UUID generated by your trading application. This field value
               will be broadcast in the public feed for received messages. You can
               use this field to identify your orders in the public feed. The client_oid
               is different than the server-assigned order id. If you are consuming the
               public feed and see a received message with your client_oid, you should
               record the server-assigned order_id as it will be used for future order
               status updates.The client_oid will NOT be used after the received message is sent.
               The server-assigned order id is also returned as the id field to this
               HTTP POST request.</param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.PlaceLimitOrderAsync(Coinbase.Pro.Models.OrderSide,System.String,System.Decimal,System.Decimal,Coinbase.Pro.Models.TimeInForce,System.Boolean,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            A limit order will be filled at the price specified or better.
            A sell order can be filled at the specified price per bitcoin or
            a higher price per bitcoin and a buy order can be filled at
            the specified price or a lower price depending on market conditions.
            If market conditions cannot fill the limit order immediately,
            then the limit order will become part of the open order book until
            filled by another incoming order or canceled by the user.
            </summary>
            <param name="side">Buy side or Sell side</param>
            <param name="productId">Product Id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="size">Size of cryptocurrency to buy or sell when limit price is hit.</param>
            <param name="limitPrice">The price of the cryptocurrency to buy or sell at.</param>
            <param name="timeInForce">Time in force policies provide guarantees about the lifetime of an order.</param>
            <param name="postOnly">The post-only flag indicates that the order should only make
               liquidity. If any part of the order results in taking liquidity, the
               order will be rejected and no part of it will execute.</param>
            <param name="clientOid"> The optional client_oid field must be a
               UUID generated by your trading application. This field value
               will be broadcast in the public feed for received messages. You can
               use this field to identify your orders in the public feed. The client_oid
               is different than the server-assigned order id. If you are consuming the
               public feed and see a received message with your client_oid, you should
               record the server-assigned order_id as it will be used for future order
               status updates.The client_oid will NOT be used after the received message is sent.
               The server-assigned order id is also returned as the id field to this
               HTTP POST request.</param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.PlaceLimitOrderAsync(Coinbase.Pro.Models.OrderSide,System.String,System.Decimal,System.Decimal,Coinbase.Pro.Models.GoodTillTime,System.Boolean,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            A limit order will be filled at the price specified or better.
            A sell order can be filled at the specified price per bitcoin or
            a higher price per bitcoin and a buy order can be filled at
            the specified price or a lower price depending on market conditions.
            If market conditions cannot fill the limit order immediately,
            then the limit order will become part of the open order book until
            filled by another incoming order or canceled by the user.
            </summary>
            <param name="side">Buy side or Sell side</param>
            <param name="productId">Product Id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="size">Size of cryptocurrency to buy or sell when limit price is hit.</param>
            <param name="limitPrice">The price of the cryptocurrency to buy or sell at.</param>
            <param name="cancelAfter">The order remains open on the book until canceled or the
               allotted cancel_after is depleted on the matching engine.
               Orders are guaranteed to cancel before any other order is processed after
               the cancel_after timestamp which is returned by the API. A day is considered 24 hours.</param>
            <param name="postOnly">The post-only flag indicates that the order should only make
               liquidity. If any part of the order results in taking liquidity, the
               order will be rejected and no part of it will execute.</param>
            <param name="clientOid"> The optional client_oid field must be a
               UUID generated by your trading application. This field value
               will be broadcast in the public feed for received messages. You can
               use this field to identify your orders in the public feed. The client_oid
               is different than the server-assigned order id. If you are consuming the
               public feed and see a received message with your client_oid, you should
               record the server-assigned order_id as it will be used for future order
               status updates.The client_oid will NOT be used after the received message is sent.
               The server-assigned order id is also returned as the id field to this
               HTTP POST request.</param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.PlaceStopOrderAsync(Coinbase.Pro.Models.OrderSide,System.String,System.Decimal,Coinbase.Pro.Models.AmountType,System.Decimal,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Stop orders become active and wait to trigger based on the movement of the
            last trade price. There are two types of stop orders, stop loss and stop entry:
            1. stop 'loss': Triggers when the last trade price changes to a value at or below the stop_price.
            2. stop: 'entry': Triggers when the last trade price changes to a value at or above the stop_price.
            The last trade price is the last price at which an order was filled.
            </summary>
            <param name="side">Buy side or Sell side</param>
            <param name="productId">Product Id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="amount">The amount, size or funds to buy or sell.</param>
            <param name="amountType">When placing a market order you can specify funds and/or size.
               Funds will limit how much of your quote currency account balance
               is used and size will limit the cryptocurrency amount transacted.</param>
            <param name="stopPrice">The market price that will trigger this order to execute.</param>
            <param name="clientOid">The optional client_oid field must be a
               UUID generated by your trading application. This field value
               will be broadcast in the public feed for received messages. You can
               use this field to identify your orders in the public feed. The client_oid
               is different than the server-assigned order id. If you are consuming the
               public feed and see a received message with your client_oid, you should
               record the server-assigned order_id as it will be used for future order
               status updates.The client_oid will NOT be used after the received message is sent.
               The server-assigned order id is also returned as the id field to this
               HTTP POST request.</param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.PlaceStopLimitOrderAsync(Coinbase.Pro.Models.OrderSide,System.String,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Create an order that executes when a specific target market price is hit
            with limits on the maximum or minimum price you're willing pay or sell
            respectively. When the market price reaches the stop price, this kind of
            'stop limit order' will execute as a market order with the specified criteria.
            </summary>
            <param name="side">Buy side or Sell side</param>
            <param name="productId">Product Id. IE: 'BTC-USD', 'ETH-USD', etc.</param>
            <param name="size">Size of cryptocurrency to buy or sell when stop price is hit.</param>
            <param name="stopPrice">The market price that will trigger this order to execute.</param>
            <param name="limitPrice">The maximum price you're willing to pay when the order executes
               or the minimum price you're willing to sell when the order executes.</param>
        </member>
        <member name="M:Coinbase.Pro.IOrdersEndpoint.PlaceOrderAsync(Coinbase.Pro.Models.CreateOrder,System.Threading.CancellationToken)">
            <summary>
            Advanced: Use this method if you want to create your own order with custom fields.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IPaymentMethodsEndpoint.GetAllPaymentMethodsAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of your payment methods.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IReportsEndpoint.CreateFillReportAsync(System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,Coinbase.Pro.Models.ReportFormat,System.String,System.Threading.CancellationToken)">
            <summary>
            Reports provide batches of historic information about your account in
            various human and machine readable forms. The file_url field will be available once
            the report has successfully been created and is available for download.
            </summary>
            <param name="startDate">Starting date for the report (inclusive)</param>
            <param name="endDate">Ending date for the report (inclusive)</param>
            <param name="productId">ID of the product to generate a fills report for. E.g. BTC-USD.</param>
            <param name="accountId">ID of the account to generate an account report for.</param>
            <param name="format">Default PDF.</param>
            <param name="email">Optional. Email address to send the report to.</param>
        </member>
        <member name="M:Coinbase.Pro.IReportsEndpoint.CreateAccountReportAsync(System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,Coinbase.Pro.Models.ReportFormat,System.String,System.Threading.CancellationToken)">
            <summary>
            Reports provide batches of historic information about your account in
            various human and machine readable forms. The file_url field will be available once
            the report has successfully been created and is available for download.
            </summary>
            <param name="startDate">Starting date for the report (inclusive)</param>
            <param name="endDate">Ending date for the report (inclusive)</param>
            <param name="accountId">ID of the account to generate an account report for.</param>
            <param name="productId">ID of the product to generate a fills report for. E.g. BTC-USD.</param>
            <param name="format">Default PDF.</param>
            <param name="email">Optional. Email address to send the report to.</param>
        </member>
        <member name="M:Coinbase.Pro.IReportsEndpoint.CreateReportAsync(Coinbase.Pro.Models.CreateReport,System.Threading.CancellationToken)">
            <summary>
            Advanced: For users that want to create their own report with custom parameters
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IReportsEndpoint.GetReportStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Once a report request has been accepted for processing, the status is available by
            polling the report resource endpoint.
            The final report will be uploaded and available at file_url once the status
            indicates ready
            </summary>
            <param name="reportId">The Report ID</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.IUserAccountEndpoint.GetTrailingVolumeAsync(System.Threading.CancellationToken)">
            <summary>
            This request will return your 30-day trailing volume for all products.
            This is a cached value that’s calculated every day at midnight UTC.
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.Pro.IWithdrawalsEndpoint.WithdrawFundsToPaymentMethodAsync(System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds to a payment method.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IWithdrawalsEndpoint.WithdrawFundsToCoinbaseAsync(System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds to a coinbase account. You can move funds between your Coinbase
            accounts and your Coinbase Pro trading accounts within your daily limits.
            Moving funds between Coinbase and Coinbase Pro is instant and free.
            See the Coinbase Accounts section for retrieving your Coinbase accounts
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IWithdrawalsEndpoint.WithdrawFundsToCryptoAddressAsync(System.String,System.Decimal,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Withdraws funds to a crypto address.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IWithdrawalsEndpoint.GetFeeEstimate(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the network fee estimate when sending to the given address.
            </summary>
            <param name="currency">The type of currency</param>
            <param name="cryptoAddress">A crypto address of the recipient</param>
        </member>
        <member name="M:Coinbase.Pro.IWithdrawalsEndpoint.GetWithdrawal(System.String,System.Threading.CancellationToken)">
            <summary>
            Get information on a single withdrawal.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.IWithdrawalsEndpoint.ListWithdrawals(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Get a list of deposits from the profile of the API key, in descending order by created time.
            </summary>
            <param name="profileId">Limit list of deposits to this profile_id. By default, it retrieves deposits across all of the user's profiles</param>
            <param name="limit">Truncate list to this many deposits, capped at 100. Default is 100.</param>
            <param name="before">If before is set, then it returns deposits created after the before timestamp, sorted by oldest creation date</param>
            <param name="after">If after is set, then it returns deposits created before the after timestamp, sorted by newest</param>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateOrder.Type">
            <summary>
            When placing an order, you can specify the order type. The order type
            you specify will influence which other order parameters are required
            as well as how your order will be executed by the matching engine.
            If type is not specified, the order will default to a limit order.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateOrder.Stp">
            <summary>
            Self-trading is not allowed on Coinbase Pro. Two orders from the
            same user will not fill one another. When placing an order,
            you can specify the self-trade prevention behavior.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateOrder.Stop">
            <summary>
            Stop orders become active and wait to trigger based on the movement
            of the last trade price. There are two types of stop orders,
            stop loss and stop entry:
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.CreateMarketOrder">
            <summary>
            Market orders differ from limit orders in that they provide no pricing
            guarantees. They however do provide a way to buy or sell specific
            amounts of cryptocurrency or fiat without having to specify the price.
            Market orders execute immediately and no part of the market order
            will go on the open order book. Market orders are always considered
            takers and incur taker fees. When placing a market order you can
            specify funds and/or size. Funds will limit how much of your quote
            currency account balance is used and size will limit the cryptocurrency
            amount transacted.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateMarketOrder.Size">
            <summary>
            Funds will limit how much of your quote currency account
            balance is used.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateMarketOrder.Funds">
            <summary>
            Size will limit the cryptocurrency amount transacted.
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.AmountType">
            <summary>
            When placing a market order you can specify funds and/or size.
            Funds will limit how much of your quote currency account balance
            is used and size will limit the cryptocurrency amount transacted.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.AmountType.UseSize">
             <summary>
             Size will limit the cryptocurrency amount transacted. The size must
             be greater than the base_min_size for the product and no larger
             than the base_max_size. The size can be in any increment of the
             base currency (BTC for the BTC-USD product), which includes satoshi
             units. size indicates the amount of BTC (or base currency) to buy or sell.
            
             A market sell order can also specify the funds. If funds is specified,
             it will limit the sell to the amount of funds specified. You can
             use funds with sell orders to limit the amount of quote
             currency funds received.
             </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.AmountType.UseFunds">
            <summary>
            Funds will limit how much of your quote currency account balance
            is used. The funds field is optionally used for market orders.
            When specified it indicates how much of the product quote
            currency to buy or sell. For example, a market buy for
            BTC-USD with funds specified as 150.00 will spend
            150 USD to buy BTC (including any fees). If the funds
            field is not specified for a market buy order, size
            must be specified and Coinbase Pro will use available
            funds in your account to buy bitcoin.
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.StopType">
            <summary>
            Stop orders become active and wait to trigger based on the
            movement of the last trade price. There are two types of stop
            orders, stop loss and stop entry:
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.StopType.Loss">
            <summary>
            stop: 'loss': Triggers when the last trade price changes to a value at or below the stop_price.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.StopType.Entry">
            <summary>
            stop: 'entry': Triggers when the last trade price changes to a value at or above the stop_price.
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.SelfTradePrevention">
            <summary>
            Self-trading is not allowed on Coinbase Pro. Two orders from the
            same user will not fill one another. When placing an order,
            you can specify the self-trade prevention behavior.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.SelfTradePrevention.DecreaseAndCancel">
            <summary>
            The default behavior is decrement and cancel. When two orders from
            the same user cross, the smaller order will be canceled and the
            larger order size will be decremented by the smaller order size.
            If the two orders are the same size, both will be canceled.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.SelfTradePrevention.CancelOldest">
            <summary>
            Cancel the older (resting) order in full. The new order
            continues to execute.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.SelfTradePrevention.CancelNewest">
            <summary>
            Cancel the newer (taking) order in full. The old resting order
            remains on the order book.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.SelfTradePrevention.CancelBoth">
            <summary>
            Immediately cancel both orders.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateReport.StartDate">
            <summary>
            Starting date for the report (inclusive)
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateReport.EndDate">
            <summary>
            Ending date for the report (inclusive)
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateReport.Format">
            <summary>
            Report Format
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateReport.Email">
            <summary>
            Email address to send the report to (optional)
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateReport.ProductId">
            <summary>
            ID of the product to generate a fills report for. E.g. BTC-USD. Required if type is fills
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.CreateReport.AccountId">
            <summary>
            ID of the account to generate an account report for. Required if type is account
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Json.ExtraJson">
            <summary>
            Extra data for/from the JSON serializer/deserializer to included with the object model.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.PagedResponse`1.Before">
            <summary>
            Most paginated requests return the latest information (newest)
            as the first page sorted by newest (in chronological time) first.
            To get older information you would request pages after the
            initial page. To get information newer, you would request
            pages before the first page.
            
            To request a page of records before the current one,
            use the before query parameter. Your initial request
            can omit this parameter to get the default first page.
            
            The response will contain a CB-BEFORE header which will return the
            cursor id to use in your next request for the page before the
            current one. The page before is a newer page and not one that
            happened before in chronological time.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.PagedResponse`1.After">
            <summary>
            To request a page of records before the current one,
            use the before query parameter. Your initial request
            can omit this parameter to get the default first page.
            
            Most paginated requests return the latest information (newest)
            as the first page sorted by newest (in chronological time) first.
            To get older information you would request pages after the
            initial page. To get information newer, you would request
            pages before the first page.
            
            The response will also contain a CB-AFTER header which will
            eturn the cursor id to use in your next request for
            the page after this one. The page after is an older page
            and not one that happened after this one in chronological time.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.BaseMaxSize">
            <summary>
            The base_min_size and base_max_size fields define the min and max order size.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.BaseMinSize">
            <summary>
            The base_min_size and base_max_size fields define the min and max order size.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.CancelOnly">
            <summary>
            cancel_only indicates whether this product only accepts cancel requests for orders.
            Only a maximum of one of trading_disabled, cancel_only, post_only, limit_only can be true at once. If none are true, the product is trading normally.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.LimitOnly">
            <summary>
            limit_only indicates whether this product only accepts limit orders.
            Only a maximum of one of trading_disabled, cancel_only, post_only, limit_only can be true at once. If none are true, the product is trading normally.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.MaxMarketFunds">
            <summary>
            The min_market_funds and max_market_funds fields define the min and max funds allowed in a market order.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.MinMarketFunds">
            <summary>
            The min_market_funds and max_market_funds fields define the min and max funds allowed in a market order.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.PostOnly">
            <summary>
            post_only indicates whether only maker orders can be placed. No orders will be matched when post_only mode is active.
            Only a maximum of one of trading_disabled, cancel_only, post_only, limit_only can be true at once. If none are true, the product is trading normally.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.TradingDisabled">
            <summary>
            trading_disabled indicates whether trading is currently restricted on this product, this includes whether both new orders and order cancelations are restricted.
            Only a maximum of one of trading_disabled, cancel_only, post_only, limit_only can be true at once. If none are true, the product is trading normally.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.QuoteIncrement">
            <summary>
            The quote_increment field specifies the min order price as well as the price increment.
            The order price must be a multiple of this increment (i.e. if the increment is 0.01, order prices of 0.001 or 0.021 would be rejected).
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.BaseIncrement">
            <summary>
            The base_increment field specifies the minimum increment for the base_currency.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Product.StatusMessage">
            <summary>
            status_message provides any extra information regarding the status if available.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Account.Id">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Account.Currency">
            <summary>
            the currency of the account
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Account.Balance">
            <summary>
            total funds in the account
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Account.Available">
            <summary>
            funds available to withdraw or trade
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Account.Hold">
            <summary>
            funds on hold (not available for use).
            When you place an order, the funds for the order are placed on hold. They cannot be used for other orders or withdrawn. Funds will remain on hold until the order is filled or canceled
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Order.Stp">
            <summary>
            Self-trading is not allowed on Coinbase Pro. Two orders from the
            same user will not fill one another. When placing an order,
            you can specify the self-trade prevention behavior.
            </summary>
        </member>
        <member name="P:Coinbase.Pro.Models.Order.Type">
            <summary>
            When placing an order, you can specify the order type. The order type
            you specify will influence which other order parameters are required
            as well as how your order will be executed by the matching engine.
            If type is not specified, the order will default to a limit order.
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.OrderType">
            <summary>
            When placing an order, you can specify the order type. The order type
            you specify will influence which other order parameters are required
            as well as how your order will be executed by the matching engine.
            If type is not specified, the order will default to a limit order.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.OrderType.Limit">
            <summary>
            Limit orders are both the default and basic order type. A limit
            order requires specifying a price and size. The size is the
            number of bitcoin to buy or sell, and the price is the price per
            bitcoin. The limit order will be filled at the price specified or
            better. A sell order can be filled at the specified price per
            bitcoin or a higher price per bitcoin and a buy order can be
            filled at the specified price or a lower price depending on
            market conditions. If market conditions cannot fill the limit
            order immediately, then the limit order will become part of
            the open order book until filled by another incoming order or
            canceled by the user.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.OrderType.Market">
            <summary>
            market orders differ from limit orders in that
            they provide no pricing guarantees.
            They however do provide a way to buy or sell specific
            amounts of bitcoin or fiat without having to specify
            the price. Market orders execute immediately and no
            part of the market order will go on the open order book.
            Market orders are always considered takers and incur taker
            fees. When placing a market order you can specify funds
            and/or size. Funds will limit how much of your quote
            currency account balance is used and size will limit
            the bitcoin amount transacted.
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.TimeInForce">
            <summary>
            Time in force policies provide guarantees about the lifetime of
            an order. There are four policies: good till canceled GTC, good
            till time GTT, immediate or cancel IOC, and fill or kill FOK
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.TimeInForce.GoodTillCanceled">
            <summary>
            Good till canceled orders remain open on the book until
            canceled. This is the default behavior if no policy is specified.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.TimeInForce.GoodTillTime">
            <summary>
            Good till time orders remain open on the book until
            canceled or the allotted cancel_after is depleted on the
            matching engine. GTT orders are guaranteed to cancel before
            any other order is processed after the cancel_after timestamp
            which is returned by the API. A day is considered 24 hours.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.TimeInForce.ImmediateOrCancel">
            <summary>
            Immediate or cancel orders instantly cancel the remaining
            size of the limit order instead of opening it on the book.
            </summary>
        </member>
        <member name="F:Coinbase.Pro.Models.TimeInForce.FillOrKill">
            <summary>
            Fill or kill orders are rejected if the entire size
            cannot be matched.
            </summary>
        </member>
        <member name="T:Coinbase.Pro.Models.FillLiquidity">
            <summary>
            The liquidity field indicates if the fill was the result of a
            liquidity provider or liquidity taker. M indicates Maker and T
            indicates Taker.
            </summary>
        </member>
        <member name="M:Coinbase.Pro.WebSockets.CoinbaseProWebSocket.ConnectAsync">
            <summary>
            Connect the websocket to Coinbase Pro.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
